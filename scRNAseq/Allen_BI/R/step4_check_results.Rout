
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(data.table)
> library(tidyr)
> library(stringr)
> library(ggplot2)
> library(Rtsne)
> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-1
> 
> theme_set(theme_classic())
> 
> # ------------------------------------------------------------------------
> # check the cell cluster information
> # ------------------------------------------------------------------------
> 
> clusters = readRDS("../data/final_hvg_clust.rds")
> dim(clusters)
[1] 15858    75
> names(clusters)
 [1] "sample_name"          "PC1"                  "PC2"                 
 [4] "PC3"                  "PC4"                  "PC5"                 
 [7] "PC6"                  "PC7"                  "PC8"                 
[10] "PC9"                  "PC10"                 "PC11"                
[13] "PC12"                 "PC13"                 "PC14"                
[16] "PC15"                 "PC16"                 "PC17"                
[19] "PC18"                 "PC19"                 "PC20"                
[22] "PC21"                 "PC22"                 "PC23"                
[25] "PC24"                 "PC25"                 "PC26"                
[28] "PC27"                 "PC28"                 "PC29"                
[31] "PC30"                 "PC31"                 "PC32"                
[34] "PC33"                 "PC34"                 "PC35"                
[37] "PC36"                 "PC37"                 "PC38"                
[40] "PC39"                 "PC40"                 "PC41"                
[43] "PC42"                 "PC43"                 "PC44"                
[46] "PC45"                 "PC46"                 "PC47"                
[49] "PC48"                 "PC49"                 "PC50"                
[52] "log10_total_features" "sex"                  "brain_hemisphere"    
[55] "brain_subregion"      "facs_sort_criteria"   "class"               
[58] "cluster"              "cell_type"            "HVG_TSNE1"           
[61] "HVG_TSNE2"            "KM_5"                 "KM_6"                
[64] "KM_7"                 "KM_8"                 "KM_9"                
[67] "KM_10"                "KM_11"                "KM_12"               
[70] "KM_13"                "KM_14"                "KM_15"               
[73] "sc3_5_clusters"       "sc3_10_clusters"      "sc3_15_clusters"     
> 
> clusters[1:2,c(1,52:61)]
          sample_name log10_total_features sex brain_hemisphere brain_subregion
1 F1S4_160106_001_B01             3.720655   M                L              L5
2 F1S4_160106_001_C01             3.916349   M                L              L5
  facs_sort_criteria         class             cluster cell_type  HVG_TSNE1
1      NeuN-positive     GABAergic Inh L4-6 SST B3GAT2       Inh -17.128998
2      NeuN-positive Glutamatergic Exc L5-6 RORB TTC12       Exc  -7.126374
  HVG_TSNE2
1  48.11234
2 -12.36402
> table(clusters$cell_type)

  Astro    Endo     Exc     Inh   Micro   Oligo     OPC unknown 
    288       9   10473    4151      63     313     238     323 
> 
> dat = fread("../data/cts_all_but_Micro_Endo_ordered.txt.gz")
> dim(dat)
[1]  1518 15396
> dat[1:2,1:3]
   gene_name F1S4_160106_001_B01 F1S4_160106_002_G01
1:      ACO1                   0                   0
2:      LIPA                   0                   0
> 
> table(names(dat)[-1] %in% clusters$sample_name)

 TRUE 
15395 
> 
> table(clusters$cell_type)

  Astro    Endo     Exc     Inh   Micro   Oligo     OPC unknown 
    288       9   10473    4151      63     313     238     323 
> mat1 = match(names(dat)[-1], clusters$sample_name)
> table(clusters$cell_type[mat1])

Astro   Exc   Inh Oligo   OPC 
  287 10434  4131   310   233 
> 
> # ------------------------------------------------------------------------
> # Read in the losses
> # ------------------------------------------------------------------------
> 
> ds_loss = fread("../new_plots/AE_manual_loss.csv")
> lc_loss = fread("../new_plots/lc_AE_manual_loss.csv")
> 
> dim(ds_loss)
[1] 499   3
> dim(lc_loss)
[1] 499   3
> ds_loss[1:2,]
   epoch_idx train_loss valid_loss
1:         1 0.02496352 0.02438582
2:         2 0.02417800 0.02394826
> lc_loss[1:2,]
   epoch_idx train_loss valid_loss
1:         1 0.02449272 0.02431775
2:         2 0.02429360 0.02420584
> 
> table(ds_loss$epoch_idx == 1:499)

TRUE 
 499 
> table(lc_loss$epoch_idx == 1:499)

TRUE 
 499 
> 
> loss = merge(ds_loss, lc_loss, by="epoch_idx", suffixes=c("_dense", "_local"))
> dim(loss)
[1] 499   5
> loss[1:2,]
   epoch_idx train_loss_dense valid_loss_dense train_loss_local
1:         1       0.02496352       0.02438582       0.02449272
2:         2       0.02417800       0.02394826       0.02429360
   valid_loss_local
1:       0.02431775
2:       0.02420584
> 
> summary(loss)
   epoch_idx     train_loss_dense  valid_loss_dense  train_loss_local 
 Min.   :  1.0   Min.   :0.02193   Min.   :0.02267   Min.   :0.02224  
 1st Qu.:125.5   1st Qu.:0.02198   1st Qu.:0.02269   1st Qu.:0.02226  
 Median :250.0   Median :0.02206   Median :0.02273   Median :0.02232  
 Mean   :250.0   Mean   :0.02218   Mean   :0.02276   Mean   :0.02245  
 3rd Qu.:374.5   3rd Qu.:0.02227   3rd Qu.:0.02279   3rd Qu.:0.02246  
 Max.   :499.0   Max.   :0.02496   Max.   :0.02439   Max.   :0.02449  
 valid_loss_local 
 Min.   :0.02247  
 1st Qu.:0.02249  
 Median :0.02251  
 Mean   :0.02261  
 3rd Qu.:0.02260  
 Max.   :0.02432  
> loss_long = pivot_longer(loss, cols=!epoch_idx, names_to = "loss_type", 
+                          values_to = "loss_value")
> dim(loss_long)
[1] 1996    3
> loss_long[1:2,]
# A tibble: 2 x 3
  epoch_idx loss_type        loss_value
      <int> <chr>                 <dbl>
1         1 train_loss_dense     0.0250
2         1 valid_loss_dense     0.0244
> 
> loss_long$data = str_extract(loss_long$loss_type, "[:alpha:]+(?=_)")
> loss_long$NN   = str_extract(loss_long$loss_type, "(?<=loss_)[:alpha:]+")
> 
> dim(loss_long)
[1] 1996    5
> loss_long[1:2,]
# A tibble: 2 x 5
  epoch_idx loss_type        loss_value data  NN   
      <int> <chr>                 <dbl> <chr> <chr>
1         1 train_loss_dense     0.0250 train dense
2         1 valid_loss_dense     0.0244 valid dense
> 
> g1 = ggplot(loss_long, 
+             aes(x=epoch_idx, y=loss_value, color=NN, group=loss_type)) + 
+   geom_line(aes(linetype=data)) + xlab("Epoch Index") + ylab("Loss")
> 
> pdf("../new_plots/AE_lc_dense_manual_loss.pdf", width=4, height=2.7)
> g1
> dev.off()
null device 
          1 
> 
> # ------------------------------------------------------------------------
> # Read in encoding for 
> # ------------------------------------------------------------------------
> 
> encoding = fread("../new_plots/lc_AE_manual_latent_output.csv")
> dim(encoding)
[1] 3079   21
> 
> encoding[1:2,]
          d1        d2        d3        d4        d5        d6       d7
1: 0.7099584 0.6370543 0.6098357 0.4839693 0.6341683 0.5785390 1.140473
2: 1.7137530 0.7271194 1.2956344 0.9330329 2.3296294 0.6808026 1.622441
          d8        d9       d10       d11       d12       d13       d14
1: 0.9537526 0.3857122 0.3957232 0.8429085 0.4438942 0.3201851 1.0612500
2: 0.5925169 1.3669394 0.6216282 1.9405396 1.2972513 0.8788463 0.4643859
         d15      d16       d17       d18       d19       d20
1: 0.9889412 1.110682 1.3998600 0.2479886 0.2525450 0.8011975
2: 1.0755289 1.270321 0.6891784 0.4802911 0.5104166 0.9357141
              cellname
1: F1S4_170106_064_G01
2: F2S4_161123_087_G01
> 
> set.seed(100)
> date()
[1] "Thu Jun 17 02:27:52 2021"
> tsne = Rtsne(encoding[,1:20], pca = FALSE)
> date()
[1] "Thu Jun 17 02:28:01 2021"
> 
> df_tsne = data.frame(tsne$Y)
> dim(df_tsne)
[1] 3079    2
> 
> table(encoding$cellname %in% clusters$sample_name)

TRUE 
3079 
> mat1 = match(encoding$cellname, clusters$sample_name)
> df_tsne$cell_type = clusters$cell_type[mat1]
> table(df_tsne$cell_type)

Astro   Exc   Inh Oligo   OPC 
   48  2081   840    63    47 
> 
> dim(df_tsne)
[1] 3079    3
> df_tsne[1:2,]
         X1         X2 cell_type
1 -1.154638 -11.672692       Exc
2 24.085360   7.408268       Inh
> 
> cols = c("#FF7F00","orchid", "red","dodgerblue2","black")
> 
> gp1 = ggplot(df_tsne, aes(X1,X2,col=cell_type)) + 
+   geom_point(size=0.2,alpha=0.6) + theme_classic() + 
+   scale_color_manual(values=cols) + 
+   guides(color = guide_legend(override.aes = list(size=3)))
> 
> gp1
> 
> pdf("../new_plots/AE_lc_manual_TSNE.pdf", width=3.5, height=2.7)
> gp1
> dev.off()
pdf 
  2 
> 
> # ------------------------------------------------------------------------
> # try MDS
> # ------------------------------------------------------------------------
> 
> dat_training = dat[, .SD, .SDcols=setdiff(names(dat), 
+                                           c("gene_name", encoding$cellname))]
> dim(dat_training)
[1]  1518 12316
> dat_training[1:2,1:3]
   F1S4_160106_002_G01 F1S4_160106_003_C01 F1S4_160106_004_C01
1:                   0                   0                   0
2:                   0                   0                   0
> 
> dat_testing = dat[, .SD, .SDcols=encoding$cellname]
> dim(dat_testing)
[1] 1518 3079
> dat_testing[1:2,1:3]
   F1S4_170106_064_G01 F2S4_161123_087_G01 F2S4_160421_069_C01
1:                 194                   0                   0
2:                   0                   0                 336
> 
> rd = colSums(dat_training)
> summary(rd)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  22891  111056  146080  154399  188446  723892 
> dat_training = log(t(dat_training + 1)/(median(rd)/rd))
> 
> rd = colSums(dat_testing)
> summary(rd)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  19101  110876  146653  154734  187541  807676 
> dat_testing = log(t(dat_testing + 1)/(median(rd)/rd))
> 
> dim(dat_training)
[1] 12316  1518
> dat_training[1:2,1:3]
                         [,1]      [,2]      [,3]
F1S4_160106_002_G01 0.7992522 0.7992522 4.9101261
F1S4_160106_003_C01 0.4617335 0.4617335 0.4617335
> 
> dim(dat_testing)
[1] 3079 1518
> dat_testing[1:2,1:3]
                        [,1]      [,2]     [,3]
F1S4_170106_064_G01 5.749224 0.4762243 6.244545
F2S4_161123_087_G01 0.153103 0.1531030 0.153103
> 
> date()
[1] "Thu Jun 17 02:28:04 2021"
> mds = cmdscale(dist(dat_training), k=20)
> date()
[1] "Thu Jun 17 03:29:07 2021"
> 
> dim(mds)
[1] 12316    20
> 
> set.seed(100)
> date()
[1] "Thu Jun 17 03:29:07 2021"
> tsne_mds = Rtsne(mds, pca = FALSE)
> date()
[1] "Thu Jun 17 03:29:39 2021"
> 
> df_tsne_mds = data.frame(tsne_mds$Y)
> mat1 = match(rownames(dat_training), clusters$sample_name)
> df_tsne_mds$cell_type = clusters$cell_type[mat1]
> table(df_tsne_mds$cell_type)

Astro   Exc   Inh Oligo   OPC 
  239  8353  3291   247   186 
> 
> dim(df_tsne_mds)
[1] 12316     3
> df_tsne_mds[1:2,]
         X1        X2 cell_type
1 19.679266 -15.68362       Inh
2  9.931917 -47.73761       Inh
> 
> cols = c("#FF7F00","orchid", "red","dodgerblue2","black")
> 
> gp2 = ggplot(df_tsne_mds, aes(X1,X2,col=cell_type)) + 
+   geom_point(size=0.2,alpha=0.6) + theme_classic() + 
+   scale_color_manual(values=cols) + 
+   guides(color = guide_legend(override.aes = list(size=3)))
> 
> gp2
> 
> pdf("../new_plots/mds_TSNE_training.pdf", width=3.5, height=2.7)
> gp2
> dev.off()
pdf 
  2 
> 
> # ------------------------------------------------------------------------
> # MDS in testing data
> # ------------------------------------------------------------------------
> 
> dim(mds)
[1] 12316    20
> mds[1:2,1:3]
                         [,1]      [,2]     [,3]
F1S4_160106_002_G01 -59.99541 -45.86456 3.799219
F1S4_160106_003_C01 -47.40051 -36.82041 1.937862
> 
> mds_testing = matrix(NA, nrow=nrow(dat_testing), ncol=20)
> 
> ss = rep(NA, 20)
> for(k in 1:20){
+   if(k %% 2 == 0){
+     cat(k, date(), "\n")
+   }
+   # k = 1
+   y = mds[,k]
+   fit_k = glmnet(dat_training, y)
+   ss[k] = min(fit_k$lambda[which(fit_k$dev.ratio > 0.99)])
+   beta_k = coef(fit_k, s = ss[k])[-1,1]
+   mds_testing[,k] = dat_testing %*% beta_k
+ }
2 Thu Jun 17 03:29:46 2021 
4 Thu Jun 17 03:29:59 2021 
6 Thu Jun 17 03:30:12 2021 
8 Thu Jun 17 03:30:24 2021 
10 Thu Jun 17 03:30:36 2021 
12 Thu Jun 17 03:30:48 2021 
14 Thu Jun 17 03:31:00 2021 
16 Thu Jun 17 03:31:11 2021 
18 Thu Jun 17 03:31:24 2021 
20 Thu Jun 17 03:31:36 2021 
> 
> dim(mds_testing)
[1] 3079   20
> mds_testing[1:2,1:3]
           [,1]       [,2]        [,3]
[1,] -126.86880   6.278699 -12.1053363
[2,]  -54.82901 -13.682393   0.8318377
> 
> 
> set.seed(100)
> date()
[1] "Thu Jun 17 03:31:42 2021"
> tsne_mds = Rtsne(mds_testing, pca = FALSE)
> date()
[1] "Thu Jun 17 03:31:50 2021"
> 
> df_tsne_mds = data.frame(tsne_mds$Y)
> mat1 = match(rownames(dat_testing), clusters$sample_name)
> df_tsne_mds$cell_type = clusters$cell_type[mat1]
> table(df_tsne_mds$cell_type)

Astro   Exc   Inh Oligo   OPC 
   48  2081   840    63    47 
> 
> dim(df_tsne_mds)
[1] 3079    3
> df_tsne_mds[1:2,]
         X1          X2 cell_type
1 -27.70027 -13.4701597       Exc
2  18.11940   0.7805313       Inh
> 
> cols = c("#FF7F00","orchid", "red","dodgerblue2","black")
> 
> gp3 = ggplot(df_tsne_mds, aes(X1,X2,col=cell_type)) + 
+   geom_point(size=0.2,alpha=0.6) + theme_classic() + 
+   scale_color_manual(values=cols) + 
+   guides(color = guide_legend(override.aes = list(size=3)))
> 
> gp3
> 
> pdf("../new_plots/mds_TSNE_testing.pdf", width=3.5, height=2.7)
> gp3
> dev.off()
pdf 
  2 
> 
> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] glmnet_4.1-1      Matrix_1.3-0      Rtsne_0.15        ggplot2_3.3.3    
[5] stringr_1.4.0     tidyr_1.1.2       data.table_1.13.6

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.5        pillar_1.4.7      compiler_4.0.3    R.methodsS3_1.8.1
 [5] R.utils_2.10.1    iterators_1.0.13  tools_4.0.3       digest_0.6.27    
 [9] lifecycle_0.2.0   tibble_3.0.4      gtable_0.3.0      lattice_0.20-41  
[13] pkgconfig_2.0.3   rlang_0.4.10      foreach_1.5.1     cli_2.2.0        
[17] withr_2.3.0       dplyr_1.0.2       generics_0.1.0    vctrs_0.3.6      
[21] grid_4.0.3        tidyselect_1.1.0  glue_1.4.2        R6_2.5.0         
[25] fansi_0.4.1       survival_3.2-7    farver_2.0.3      purrr_0.3.4      
[29] magrittr_2.0.1    scales_1.1.1      codetools_0.2-18  ellipsis_0.3.1   
[33] splines_4.0.3     assertthat_0.2.1  shape_1.4.5       colorspace_2.0-0 
[37] labeling_0.4.2    utf8_1.1.4        stringi_1.5.3     munsell_0.5.0    
[41] crayon_1.3.4      R.oo_1.24.0      
> q(save="no")
> proc.time()
    user   system  elapsed 
3805.148   32.925 3842.453 
